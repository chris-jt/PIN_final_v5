name: Deploy Infra y Nginx

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: cluster-PIN 
  NODE_TYPE: t3.medium
  NODE_COUNT: 3
  AMI_ID: ami-0261755bbcb8c4a84  # AMI ID for Ubuntu 20.04 LTS in us-east-1
  GRAFANA_ADMIN_PASSWORD: adminPIN 

jobs:
  Credenciales:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH key
      run: |
        ssh-keygen -t rsa -b 4096 -f jenkins.pem -N ""
        mv jenkins.pem.pub jenkins.pub

    - name: Upload SSH key
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key
        path: |
          jenkins.pem
          jenkins.pub

    - name: Upload CloudFormation template
      uses: actions/upload-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation/ec2-stack.yaml

  Deploy_CloudFormation:
    needs: Credenciales
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.ec2-ip.outputs.ec2_ip }}
    steps:      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Download CloudFormation template
      uses: actions/download-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation

    - name: Deploy CloudFormation stack
      id: deploy-cfn     
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/ec2-stack.yaml \
          --stack-name jenkins-ec2-stack \
          --parameter-overrides \
            KeyName=jenkins \
            PublicKeyMaterial="$(cat jenkins.pub)" \
            InstanceType="${{ env.NODE_TYPE }}" \
            AMI="${{ env.AMI_ID }}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
      
      env:
        NODE_TYPE: ${{ env.NODE_TYPE }}
        AMI_ID: ${{ env.AMI_ID }}

    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
        EC2_IP=$(aws cloudformation describe-stacks --stack-name jenkins-ec2-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
        echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        timeout 300 bash -c 'until nc -z ${{ steps.ec2-ip.outputs.ec2_ip }} 22; do sleep 5; done'

    - name: Setup AWS credentials on EC2
      run: |
        chmod 600 jenkins.pem
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2-ip.outputs.ec2_ip }} '
        mkdir -p ~/.aws
        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region=${{ env.AWS_REGION }}" > ~/.aws/credentials
        '
    - name: Upload SSH key and connection info
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key-and-info
        path: |
          jenkins.pem

  Conexion_EC2:
    needs: Deploy_CloudFormation
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.cluster_info.outputs.cluster_name }}

    steps:  
      - name: Checkout code
        uses: actions/checkout@v3
       
      - name: Download SSH key
        uses: actions/download-artifact@v3
        with:
          name: ssh-key
        
      - name: Set permissions for SSH key
        run: chmod 600 jenkins.pem
        
      - name: Connect to EC2 and setup cluster
        run: |
          ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} \
          'CLUSTER_NAME=${{ env.CLUSTER_NAME }} \
          AWS_REGION=${{ env.AWS_REGION }} \
          NODE_TYPE=${{ env.NODE_TYPE }} \
          NODE_COUNT=${{ env.NODE_COUNT }} bash -s' < ec2_user_data.sh

      - name: Get cluster info
        id: cluster_info
        run: |
          CLUSTER_NAME=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} 'echo $CLUSTER_NAME')
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

  Deploy_Nginx:
      needs: [Deploy_CloudFormation, Conexion_EC2]
      runs-on: ubuntu-latest
      outputs:
        nginx_url: ${{ steps.nginx-url.outputs.nginx_url }}
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Download SSH key
        uses: actions/download-artifact@v3
        with:
          name: ssh-key
        
      - name: Set permissions for SSH key
        run: chmod 600 jenkins.pem
        
      - name: Deploy Nginx
        run: |
            EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
            # Copiar archivos al EC2        
            scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/nginx-deployment.yaml kubernetes/nginx-service.yaml kubernetes/nginx-index-html-configmap.yaml ubuntu@$EC2_IP:~
                
            # Aplicar los archivos
            ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
            kubectl apply -f nginx-index-html-configmap.yaml
            kubectl apply -f nginx-deployment.yaml
            kubectl apply -f nginx-service.yaml
          
            # Esperar a que el pod estÃ© listo
            kubectl wait --for=condition=ready pod -l app=nginx --timeout=300s
          
            # Verificar el estado del despliegue
            kubectl get deployments
            kubectl get pods
            kubectl get services
            '
          
      - name: Get Nginx Service URL
        id: nginx-url
        run: |
          EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          NGINX_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl get service nginx-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
          ')
          echo "nginx_url=http://$NGINX_URL" >> $GITHUB_OUTPUT
            
      - name: Save initial connection information
        run: |
          echo "EC2 Public IP: ${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}" > connection_info.txt
          echo "Nginx Service URL: ${{ steps.nginx-url.outputs.nginx_url }}" >> connection_info.txt
          echo "To connect via SSH: ssh -i jenkins.pem ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}" >> connection_info.txt
          
      - name: Upload initial connection info
        uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt      
  
  Deploy_EFK:
    needs: [Deploy_CloudFormation, Conexion_EC2]
    runs-on: ubuntu-latest
    outputs:
      kibana_url: ${{ steps.kibana-url.outputs.kibana_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Deploy EFK Stack
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/*.yaml scripts/deploy-efk.sh ubuntu@$EC2_IP:~
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'bash deploy-efk.sh'

    - name: Get Kibana URL
      id: kibana-url
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        KIBANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl get service kibana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
        ')
        echo "kibana_url=http://$KIBANA_URL" >> $GITHUB_OUTPUT

  Deploy_Monitoring:
    needs: [Deploy_CloudFormation, Conexion_EC2]
    runs-on: ubuntu-latest
    outputs:
      prometheus_url: ${{ steps.prometheus-url.outputs.prometheus_url }}
      grafana_url: ${{ steps.grafana-url.outputs.grafana_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key
    
    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem
  
    - name: Create IAM Service Account for EBS CSI Driver
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
        eksctl create iamserviceaccount \
          --name ebs-csi-controller-sa \
          --namespace kube-system \
          --cluster ${{ env.CLUSTER_NAME }} \
          --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
          --approve \
          --override-existing-serviceaccounts \
          --region ${{ env.AWS_REGION }}
      
        # Install EBS CSI Driver
        kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=master"
      
        # Patch the EBS CSI Driver to use the new Service Account
        kubectl patch deployment ebs-csi-controller \
          -n kube-system \
          --type=json \
          -p="[{\"op\": \"replace\", \"path\": \"/spec/template/spec/serviceAccount\", \"value\": \"ebs-csi-controller-sa\"}]"
        '

    - name: Deploy Prometheus and Grafana
      run: |
              EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
              ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
              # Add Helm repo
              kubectl create namespace prometheus
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm repo update
      
              # Install Prometheus and Grafana
              helm install monitoring prometheus-community/kube-prometheus-stack \
                --namespace prometheus \
                --set grafana.adminPassword=${{ env.GRAFANA_ADMIN_PASSWORD }} \
                --set prometheus.service.type=LoadBalancer \
                --set grafana.service.type=LoadBalancer \
                --set alertmanager.persistentVolume.storageClass="gp2",server.persistentVolume.storageClass="gp2" 
              
                # Wait for pods to be ready
                timeout=300  # 5 minutes timeout
                start_time=$(date +%s)

                echo "Waiting for pods to be ready..."
                while true; do
                  if kubectl get pods -n prometheus -l "release=monitoring" | grep -q ContainerCreating; then
                    echo "Some pods are still being created. Waiting..."
                    sleep 10
                  else
                    echo "All pods are in Running state."
                    break
                  fi

                  current_time=$(date +%s)
                  if (( current_time - start_time > timeout )); then
                    echo "Timeout reached. Some pods may not be ready."
                    exit 1
                  fi
                done

                echo "Checking final status of pods:"
                kubectl get pods -n prometheus

              # Wait for deployments to be ready
              kubectl wait --for=condition=available --timeout=300s deployment/monitoring-grafana
              kubectl wait --for=condition=available --timeout=300s deployment/monitoring-kube-prometheus-operator
              '

    - name: Get Prometheus URL
      id: prometheus-url
      run: |
              EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
              PROMETHEUS_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
              kubectl get service monitoring-kube-prometheus-prometheus -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
              ')
              echo "prometheus_url=http://$PROMETHEUS_URL:9090" >> $GITHUB_OUTPUT
      
    - name: Get Grafana URL
      id: grafana-url
      run: |
              EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
              GRAFANA_URL=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
              kubectl get service monitoring-grafana -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"
              ')
              echo "grafana_url=http://$GRAFANA_URL" >> $GITHUB_OUTPUT

  Create_Connection_Info:
    needs: [Deploy_CloudFormation, Deploy_Nginx, Deploy_EFK, Conexion_EC2, Deploy_Monitoring]
    runs-on: ubuntu-latest
    steps:
      - name: Create connection info
        run: |
          cat <<EOF > connection_info.txt
          EC2 Public IP: ${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          Nginx Service URL: ${{ needs.Deploy_Nginx.outputs.nginx_url }}
          Kibana URL: ${{ needs.Deploy_EFK.outputs.kibana_url }}
          Grafana URL: ${{ needs.Conexion_EC2.outputs.grafana_url }}
          Grafana admin password: ${{ needs.Conexion_EC2.outputs.grafana_password }}
          To connect via SSH: ssh -i jenkins.pem ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
          EOF

      - name: Upload connection info
        uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

  Final_Setup:
    needs: [Create_Connection_Info]
    runs-on: ubuntu-latest
    steps:
      - name: Download connection info
        uses: actions/download-artifact@v3
        with:
          name: connection-info
      - name: Display final connection info
        run: cat connection_info.txt
      - name: Upload final connection info
        uses: actions/upload-artifact@v3
        with:
          name: connection-info
          path: connection_info.txt

  Download_Kubeconfig:
    needs: [Deploy_CloudFormation, Conexion_EC2]
    runs-on: ubuntu-latest
    steps:
    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Download kubeconfig
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP:~/.kube/config ./kubeconfig

    - name: Upload kubeconfig as artifact
      uses: actions/upload-artifact@v3
      with:
        name: kubeconfig
        path: ./kubeconfig